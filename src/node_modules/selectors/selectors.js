import * as R from 'ramda'


export const getPhoneById = (state, id) => R.prop(id, state.entities.phones);

export const getCategories = (state) => R.values(state.categories.values);

export const getActiveCategoryId = (ownProps) => R.path(['match', 'params', 'id'], ownProps)

export const getPhones = (state, ownProps) => {
  const activeCategoryId = getActiveCategoryId(ownProps);

  const applySearch = (item) => R.includes(
    R.toLower(state.search.searchTerm),
    R.toLower(R.prop('name', item))
  ); // search elements in array, string or object

  const applyCategory = (item) => R.equals(
    activeCategoryId,
    R.prop('categoryId', item)
  );

  return R.compose(
    R.filter(applySearch),
    R.when(R.always(activeCategoryId), R.filter(applyCategory)),
    R.map(id => getPhoneById(state, id)),
  )(state.phonesPage.ids);
};

export const getTotalBasketCount = (state) => R.length(state.basket);

export const getTotalBasketPrice = (state) => (
  R.compose(
    R.sum,
    R.pluck('price'),
    R.map(id => getPhoneById(state, id))
  )(state.basket)
);

export const getBasketPhonesWithCount = (state) => {
  const phoneCount = (id) => R.compose(
    R.length,
    R.filter(element => R.equals(id, element)),
  )(state.basket); // count the numbers of each phone in Basket

  // adding to each phone in Basket property Count
  const phoneWithCountProperty = (phone) => R.assoc('count', phoneCount(phone.id), phone);

  const uniqueIds = R.uniq(state.basket);

  return R.compose(
    R.map(phoneWithCountProperty),
    R.map(id => getPhoneById(state, id)),
  )(uniqueIds)
}

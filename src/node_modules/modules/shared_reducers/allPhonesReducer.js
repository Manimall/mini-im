import * as R from 'ramda'
import { handleActions } from 'redux-actions'

import {FetchPhonesFailure, FetchPhonesStart, FetchPhonesSuccess} from 'modules/Phones'
import {LoadMorePhonesStart, LoadMorePhonesSuccess, LoadMorePhonesFailure} from 'modules/LoadMorePhones'
import {FetchPhoneByIdStart, FetchPhoneByIdSuccess, FetchPhoneByIdFailure} from 'modules/SinglePhone'
import {SearchPhoneFailure, SearchPhoneStart, SearchPhoneSuccess} from 'modules/Search'

const initialState = {};

const getDataBeforeLoading = (state, _action) => (
  R.mergeRight(state, {
    isLoading: true,
    err: false,
  })
);

const getDataInFailureCase = (state, { payload }) => (
  R.mergeRight(state, {
    isLoading: false,
    error: payload,
    err: true
  })
);


const allPhonesReducer = handleActions({
  [FetchPhonesStart]: (state, action) => getDataBeforeLoading(state, action),

  [FetchPhonesSuccess]: (state, { payload }) => {
    const phones = R.indexBy(R.prop('id'), payload);

    return R.mergeRight(state, {
      phones,
      isLoading: false,
      err: false,
    });
  },

  [FetchPhonesFailure]: (state, { payload }) => getDataInFailureCase(state, { payload }),

  [LoadMorePhonesStart]: (state, action) => getDataBeforeLoading(state, action),

  [LoadMorePhonesSuccess]: (state, { payload }) => {
    const moreValues = R.indexBy(R.prop('id'), payload);

    return R.mergeRight(state, {
      phones: moreValues,
      isLoading: false,
      err: false,
    })
  },

  [LoadMorePhonesFailure]: (state, { payload }) => getDataInFailureCase(state, { payload }),

  [FetchPhoneByIdStart]: (state, action) => getDataBeforeLoading(state, action),

  [FetchPhoneByIdSuccess]: (state, { payload }) => {
    const newPhones = R.assoc(payload.id, payload, state.phones);

    return R.mergeRight(state, {
      phones: newPhones,
      isLoading: false,
      err: false,
    });
  },

  [FetchPhoneByIdFailure]: (state, { payload }) => getDataInFailureCase(state, { payload }),

  [SearchPhoneStart]: (state, action) => getDataBeforeLoading(state, action),

  [SearchPhoneSuccess]: (state, { payload }) => (
    R.mergeRight(state, {
      isLoading: false,
      err: false,
    })
  ),

  [SearchPhoneFailure]: (state, { payload }) => getDataInFailureCase(state, { payload }),

}, initialState);

export { allPhonesReducer };
